#ifndef tRawSpinLock__INLINE_H
#define tRawSpinLock__INLINE_H

/*
 * This file was automatically generated by tecsgen.
 * Move and rename like below before editing,
 *   gen/tRawSpinLock_inline_template.h => src/tRawSpinLock_inline.h
 * to avoid to be overwritten by tecsgen.
 */
/* #[<PREAMBLE>]#
 * Don't edit the comments between #[<...>]# and #[</...>]#
 * These comment are used by tecsmerege when merging.
 *
 * attr access macro #_CAAM_#
 * pLockVar          int32_t          ATTR_pLockVar     
 *
 * #[</PREAMBLE>]# */

/* entry port function #_TEPF_# */
/* #[<ENTRY_PORT>]# eRawSpinLock
 * entry port: eRawSpinLock
 * signature:  sRawSpinLock
 * context:    task
 * #[</ENTRY_PORT>]# */

/* #[<ENTRY_FUNC>]# eRawSpinLock_lock
 * name:         eRawSpinLock_lock
 * global_name:  tRawSpinLock_eRawSpinLock_lock
 * oneway:       false
 * #[</ENTRY_FUNC>]# */
Inline void
eRawSpinLock_lock(CELLIDX idx)
{
	CELLCB    *p_cellcb;
	volatile uint32_t  *ptr;

	p_cellcb = GET_CELLCB(idx);
        ptr = ATTR_pLockVar;
	/* Put statements here #_TEFB_# */
	__asm volatile(
             "MOV     r1, #1           /* Initialize the 'lock taken' value */\n" 
        "try:\n"
        "\t" "LDREX   r2, [%0]\n"          /* Load the lock value */
        "\t" "CMP     r2, #0\n"            /* Is the lock free? */
        "\t" "ITT     EQ\n"                /* IT instruction for STREXEQ and CMPEQ */
        "\t" "STREXEQ r2, r1, [%0]\n"      /* Try and claim the lock */
        "\t" "CMPEQ   r2, #0\n"            /* Did this succeed? */
        "\t" "BNE     try\n"               /* No - try again */
        : : "r"(ptr): "r1", "r2", "memory" );
}

/* #[<ENTRY_FUNC>]# eRawSpinLock_tryLock
 * name:         eRawSpinLock_tryLock
 * global_name:  tRawSpinLock_eRawSpinLock_tryLock
 * oneway:       false
 * #[</ENTRY_FUNC>]# */
Inline bool_t
eRawSpinLock_tryLock(CELLIDX idx)
{
	CELLCB	 *p_cellcb;
	volatile uint32_t *ptr;
	bool_t   res;

	p_cellcb = GET_CELLCB(idx);
        ptr = ATTR_pLockVar;

	/* Put statements here #_TEFB_# */
    __asm volatile(
             "MOV     r1, #1\n"            /* Initialize the 'lock taken' value */
        "\t" "LDREX   r2, [%1]\n"          /* Load the lock value */
        "\t" "CMP     r2, #0\n"            /* Is the lock free? */
        "\t" "IT      EQ\n"                /* IT instruction for STREXEQ  */
        "\t" "STREXEQ r2, r1, [%1]\n"      /* Try and claim the lock */
        "\t" "EOR     %0, r2, #1\n"        /* complement LSB r2=1 for fail, 0 for success */
        : "=r"(res) : "r"(ptr): "r1", "r2", "memory" );

	return res;
}

/* #[<ENTRY_FUNC>]# eRawSpinLock_unlock
 * name:         eRawSpinLock_unlock
 * global_name:  tRawSpinLock_eRawSpinLock_unlock
 * oneway:       false
 * #[</ENTRY_FUNC>]# */
Inline void
eRawSpinLock_unlock(CELLIDX idx)
{
	CELLCB	*p_cellcb;
	p_cellcb = GET_CELLCB(idx);

	/* Put statements here #_TEFB_# */
	*ATTR_pLockVar = 0;
}

/* #[<POSTAMBLE>]#
 *   Put non-entry functions below.
 * #[</POSTAMBLE>]#*/

#endif /* tRawSpinLock_INLINEH */
