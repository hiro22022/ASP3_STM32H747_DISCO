#
#		Makefile のターゲット依存部（NUCLEO_h701RE用）
#

#
#  ボード名, チップ名，コア名，開発環境名の定義
#
BOARD = discovery_h747
CHIP  = stm32h7xx_stm32cube
PRC   = arm_m
TOOL  = gcc

# STM32CubeMX 由来のコードは m7 側に置かれている
TARGETDIR_CM7 = $(TARGETDIR)/../stm32h747_discovery_m7

#
#  FPUを使用するか
#
FPU_USAGE = FPU_LAZYSTACKING

#
#  使用するタイマ
#
# KERNEL_TIMER = SYSTICK
KERNEL_TIMER = TIM

#
#  コンパイルオプション
#
INCLUDES := $(INCLUDES) -I$(TARGETDIR) \
	-I$(TARGETDIR_CM7)/stm32hcube/Drivers/STM32H7xx_HAL_Driver/Inc \
	-I$(TARGETDIR_CM7)/stm32hcube/Drivers/CMSIS/Include \
	-I$(TARGETDIR_CM7)/stm32hcube/Drivers/CMSIS/Device/ST/STM32H7xx/Include \
	-I$(TARGETDIR_CM7)/stm32hcube/CM4/Core/Inc \
	-I$(TARGETDIR_CM7)/stm32hcube -I../syssvc_cm4 -I../kernel \
	-I$(TARGETDIR_CM7)
CDEFS := $(CDEFS) -DSTM32H747xx -DUSE_HAL_DRIVER -DCORE_CM4
COPTS := $(COPTS) 
# LDFLAGS := -nostdlib -nostartfiles $(LDFLAGS)
# LDFLAGS := -nostdlib $(LDFLAGS)
# LDFLAGS := -nostdlib --specs=nosys.specs \
#		-Wl,--gc-sections -static --specs=nano.specs \
#        -mfpu=fpv5-d16 -mfloat-abi=hard -mthumb -Wl,--start-group \
#        -lc -lm -Wl,--end-group $(LDFLAGS)
LDFLAGS := -nostdlib --specs=nosys.specs \
		-static \
        -mfpu=fpv5-d16 -mfloat-abi=hard -mthumb -Wl,--start-group \
        -lc -lm -Wl,--end-group $(LDFLAGS)

TARGET_COBJS = target_kernel_impl.o target_kernel_impl2.o \
				system_stm32h7xx_dualcore_boot_cm4_cm7.o \
				main.o stm32h7xx_hal_msp.o stm32h7xx_it.o \
				syscalls.o sysmem.o \
				 stm32h7xx_hal.o stm32h7xx_hal_cortex.o \
				stm32h7xx_hal_dma.o stm32h7xx_hal_dma_ex.o stm32h7xx_hal_exti.o \
				stm32h7xx_hal_flash.o stm32h7xx_hal_flash_ex.o \
				stm32h7xx_hal_gpio.o stm32h7xx_hal_hsem.o \
				stm32h7xx_hal_i2c.o stm32h7xx_hal_i2c_ex.o \
				stm32h7xx_hal_mdma.o stm32h7xx_hal_pwr.o stm32h7xx_hal_pwr_ex.o \
				stm32h7xx_hal_rcc.o stm32h7xx_hal_rcc_ex.o \
				stm32h7xx_hal_tim.o stm32h7xx_hal_tim_ex.o \
				stm32h7xx_hal_uart.o stm32h7xx_hal_uart_ex.o

#				systemclock_config.o stm32h747_cube_mx.o

#
# ファイルサイズ削減のためのオプション
#
# COPTS   := $(COPTS) -O0 -ffunction-sections -fdata-sections --specs=nano.specs -fstack-usage
COPTS   := $(COPTS) -ffunction-sections -fdata-sections

# CDEFS   := $(CDEFS) -DDEBUG
CDEFS   := $(CDEFS)


#
#  カーネルに関する定義
#
KERNEL_DIRS := $(KERNEL_DIRS) $(TARGETDIR) $(TARGETDIR_CM7)/stm32hcube \
				$(TARGETDIR_CM7)/stm32hcube/Drivers/STM32H7xx_HAL_Driver/Src \
				$(TARGETDIR_CM7)/stm32hcube/Common/Src/ $(TARGETDIR_CM7)/stm32hcube/CM4/Core/Src \
				$(TARGETDIR_CM7)/stm32hcube/CM4/Core/Startup
KERNEL_ASMOBJS := $(KERNEL_ASMOBJS) start.o startup_stm32h747xihx.o
KERNEL_COBJS := $(KERNEL_COBJS)
# KERNEL_COBJS := $(KERNEL_COBJS) $(TARGET_COBJS)

#
#  システムサービスに関する定義
#
SYSSVC_DIRS := $(SYSSVC_DIRS)
SYSSVC_COBJS := $(SYSSVC_COBJS)

#
#  使用するタイマ
#
ifeq ($(KERNEL_TIMER), SYSTICK)
CDEFS := $(CDEFS) -DUSE_SYSTICK_AS_TIMETICK
KERNEL_COBJS := $(KERNEL_COBJS) core_timer.o
else
ifeq ($(KERNEL_TIMER), TIM)
CDEFS := $(CDEFS) -DUSE_TIM_AS_HRT
KERNEL_COBJS := $(KERNEL_COBJS) target_timer.o
endif
endif

#
#  GNU開発環境のターゲットアーキテクチャの定義
#
GCC_TARGET = arm-none-eabi

#
#  トレースログ記録のサンプルコードに関する定義
#
ifdef ENABLE_TRACE
	COPTS := $(COPTS) -DTOPPERS_ENABLE_TRACE
	SYSSVC_DIRS := $(SYSSVC_DIRS) $(SRCDIR)/arch/tracelog
endif

#
#  依存関係の定義
#
cfg1_out.timestamp: $(TARGETDIR)/target_timer.cfg
offset.timestamp: 
kernel_cfg.timestamp: $(TARGETDIR)/target_kernel.trb
check.timestamp: $(TARGETDIR)/target_check.trb

#
#  リンカスクリプトの定義
#
# LDSCRIPT = $(TARGETDIR)/stm32h747_m4.ld
LDSCRIPT = $(TARGETDIR_CM7)/stm32hcube/CM4/STM32H747XIHX_FLASH.ld

#
#  チップ依存部のインクルード
#
include $(SRCDIR)/arch/$(PRC)_$(TOOL)/$(CHIP)/Makefile.chip

#
#  フラッシュへの書き込み
#
UNAME_TARGET = Cygwin
OPENOCD_PATH = /cygdrive/c/arm/OpenOCD/0.10.0-201510281129-dev/bin/openocd.exe
OPENOCD_SCRIPT_PATH = c:/arm/OpenOCD/0.10.0-201510281129-dev/scripts
OPENOCD_SCRIPT  = c:/arm/OpenOCD/0.10.0-201510281129-dev/scripts/board/st_nucleo_h7.cfg

ifeq ($(UNAME_TARGET), Cygwin)
	GDB = arm-gdb_m0.exe
else
	GDB = $(ARDUINO_BASE_DIR_WIN)\hardware\tools\gcc-arm-none-eabi-4.8.3-2014q1\bin\arm-none-eabi-gdb
endif

run: $(OBJNAME).bin
ifeq ($(UNAME_TARGET), Cygwin)
	"`cygpath -u "$(OPENOCD_PATH)"`" -s "$(OPENOCD_SCRIPT_PATH)" -f "$(OPENOCD_SCRIPT)" -c "program ./$(OBJNAME).bin verify 0x08000000 reset exit"
#-c "flash probe 0; flash write_image erase ./$(OBJNAME).axf 0x08000000 reset exit"
else
	"$(OPENOCD_PATH)" -s "$(OPENOCD_SCRIPT_PATH)" -f "$(OPENOCD_SCRIPT)" -c "program ./$(OBJNAME).bin verify 0x4000 reset exit"
endif

ocd: $(OBJNAME).bin
ifeq ($(UNAME_TARGET), Cygwin)
	cygstart "$(OPENOCD_PATH)" '-s "$(OPENOCD_SCRIPT_PATH)"' '-f "$(OPENOCD_SCRIPT)"'
else
	start /MIN "" "$(OPENOCD_PATH)" -s "$(OPENOCD_SCRIPT_PATH)" -f "$(OPENOCD_SCRIPT)"
endif

db: $(OBJNAME).bin
ifeq ($(UNAME_TARGET), Cygwin)
	$(GDB) $(OBJFILE) -x $(TARGETDIR)/gdb.ini
else
	$(GDB) $(OBJFILE) -x $(TARGETDIR)/gdb.ini
endif

d: $(OBJNAME).bin
ifeq ($(UNAME_TARGET), Cygwin)
	$(GDB) $(OBJFILE) -x $(TARGETDIR)/gdb_noflash.ini
else

endif